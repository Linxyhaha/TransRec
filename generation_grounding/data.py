from typing import Optional
import jsonlines
import csv
import ast
import pathlib

import json
from enum import unique, Enum

from pyserini.query_iterator import QueryIterator, DefaultQueryIterator
from pyserini.output_writer import OutputWriter

from generation_grounding.retrieval import TransRecDocument
from datasets import load_dataset
@unique
class TopicsFormat(Enum):
    REC = 'rec'
    
@unique
class OutputFormat(Enum):
    REC = 'rec'

class RecQueryIterator(QueryIterator):
    """
        for recommendation evaluation, where topic_path is the json file path generated by make_evaluate.py
    """
    def get_query(self, id_):
        return self.topics[id_]['question_title'] + "@@##" + self.topics[id_]['question_code'] + "@@##" + self.topics[id_]['question_attribute']

    @classmethod
    def from_topics(cls, topics_path: str):
        topics = {}
        order = []
        with open(topics_path) as fin:
            for id_, instance in enumerate(json.load(fin)):
                topics[id_] = instance
                order.append(id_)
            return cls(topics, order)

def get_query_iterator(topics_path: str, topics_format: TopicsFormat, queries_path: Optional[str] = None):
    mapping = {
        TopicsFormat.REC: RecQueryIterator,
    }
    return mapping[topics_format].from_topics(topics_path)

class RecWriter(OutputWriter):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.order = []

    def write(self, topic: str, hits: list):
        datapoint = self.topics[topic]
        self.order.append(topic)
        ctxs = datapoint['ctxs'] = []
        for docid, rank, score, hit in self.hits_iterator(hits):
            title, body = hit.text()
            ctx = {
                "title": title.strip(),
                "text": body.strip(),
                "score": score,
                "item_id": docid, 
                "identifiers":hit.keys
            }
            ctxs.append(ctx)

    def __exit__(self, exc_type, exc_value, exc_traceback):
        data = [self.topics[t] for t in self.order]
        json.dump(data, self._file, indent="    ")
        return super().__exit__(exc_type, exc_value, exc_traceback) 

def get_output_writer(file_path: str, output_format: OutputFormat, *args, **kwargs) -> OutputWriter:
    mapping = {
        OutputFormat.REC: RecWriter,
    }
    return mapping[output_format](file_path, *args, **kwargs)
